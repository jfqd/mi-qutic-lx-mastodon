#!/usr/bin/bash

set -o errexit

locale-gen en_US.utf8

export LC_ALL=en_US.utf8
export LANGUAGE=en_US.utf8
export LANG=en_US.utf8

# RC 5.0.x
MASTODON_VERSION="4.2.10"
NODE_JS_VERSION="16.18.1"
RUBY_VERSION="3.2.3"
PGSQL_VERSION="17"

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

echo "* Remove apt-get workaround"
rm /usr/local/bin/apt-get || true

echo "* Get latest"
export DEBIAN_FRONTEND=noninteractive
apt-get update
yes no | apt-get -y upgrade
apt-get -y dist-upgrade

echo "* Setup nginx"
ln -nfs /etc/nginx/sites-available/mastodon /etc/nginx/sites-enabled/mastodon
mkdir -p /etc/nginx/ssl
chmod 0500 /etc/nginx/ssl
/usr/local/bin/ssl-selfsigned.sh -d /etc/nginx/ssl -f nginx
mv /usr/local/var/tmp/nginx_service /usr/lib/systemd/system/nginx.service
systemctl daemon-reload

echo "* Setup apt-requirements"
wget -O /usr/share/keyrings/postgresql.asc https://www.postgresql.org/media/keys/ACCC4CF8.asc
echo "deb [signed-by=/usr/share/keyrings/postgresql.asc] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/postgresql.list
curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/yarnkey.gpg >/dev/null
echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

echo "* Install requirements"
apt-get update
apt-get install -y \
  postgresql postgresql-contrib \
  yarn

echo "* Setup postgresql"
sed -i 's/local   all             all                                     password/local   all             all                                     peer/' \
  /etc/postgresql/${PGSQL_VERSION}/main/pg_hba.conf
sed -i "s/#listen_addresses = 'localhost'/listen_addresses = 'localhost'/" \
  /etc/postgresql/${PGSQL_VERSION}/main/postgresql.conf

echo "* Setup node"
apt-get -y install npm
npm install -g inherits n
/usr/local/bin/n $NODE_JS_VERSION
echo "node-path: $(which node)"
# ln -nfs /usr/bin/node /usr/local/bin/node

echo "* Setup corepack"
corepack enable || true

# echo "* Setup yarn"
# yarn set version stable

echo "* Fix redis for lx-branch"
sed -i -e "s|PIDFile=|#PIDFile=|" /lib/systemd/system/redis-server.service
systemctl daemon-reload
systemctl start redis  || true
systemctl enable redis || true

echo "* Fix postgresql for lx-branch"
sed -i -e "s|PIDFile=|#PIDFile=|" /lib/systemd/system/postgresql@.service
systemctl daemon-reload

echo "* Create mastoton user and group"
addgroup mastodon
adduser --disabled-password --system --quiet --home /home/mastodon --shell /usr/bin/bash mastodon
adduser mastodon mastodon
mkdir -p /home/mastodon

echo "* Setup ruby and download mastadon"
# https://docs.joinmastodon.org/admin/install/
cat > /home/mastodon/install << EOF
#!/usr/bin/bash

echo "*** Setup rbenv"
cd /home/mastodon
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
(cd ~/.rbenv && src/configure && make -C src)
echo 'export PATH="/home/mastodon/.rbenv/shims:/home/mastodon/.rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"' >> ~/.bashrc
echo 'eval "\$(rbenv init -)"' >> ~/.bashrc
chmod 0600 ~/.bashrc

cat >> ~/.bash_profile << "EOF2"
source /home/mastodon/.bashrc
export RAILS_ENV=production
EOF2
chmod 0600 ~/.bash_profile

export PATH=/home/mastodon/.rbenv/shims:/home/mastodon/.rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
eval "\$(rbenv init -)"

git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build

echo "*** Install ruby ${RUBY_VERSION}: need at least 8GB memory for compiling!"
export RUBY_CONFIGURE_OPTS=--with-jemalloc
rbenv install ${RUBY_VERSION}
rbenv global ${RUBY_VERSION}
gem install bundler --no-document

echo "*** Download mastodon"
git clone https://github.com/tootsuite/mastodon.git live && cd live
git checkout v${MASTODON_VERSION}

echo "${RUBY_VERSION}" > .ruby-version
echo "${MASTODON_VERSION}" > version

bundle config deployment 'true'
bundle config without 'development test'
bundle install
yarn install --frozen-lockfile

echo "Disallow: /" >> public/robots.txt
EOF
chown -R mastodon:mastodon /home/mastodon
chmod +x /home/mastodon/install
su - mastodon -c "/home/mastodon/install"
rm /home/mastodon/install

# echo "* Fix nginx ssl"
# cp /home/mastodon/live/dist/nginx.conf /etc/nginx/sites-enabled/mastodon
# sed -i \
#   -e "s|# ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;|ssl_certificate     /etc/nginx/ssl/nginx.pem;|" \
#   -e "s|# ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;|ssl_certificate_key /etc/nginx/ssl/nginx.key;|" \
#   /etc/nginx/sites-enabled/mastodon

echo "* Install systemd files"
mv /usr/local/var/tmp/mastodon-web_service /etc/systemd/system/mastodon-web.service
mv /usr/local/var/tmp/mastodon-sidekiq_service /etc/systemd/system/mastodon-sidekiq.service
mv /usr/local/var/tmp/mastodon-streaming_service /etc/systemd/system/mastodon-streaming.service
systemctl daemon-reload

echo "* Disable and remove rpcbind"
apt-get -y remove rpcbind || true
systemctl stop rpcbind.service
systemctl disable rpcbind.service

echo "* Disable nfs-client"
systemctl unmask nfs-client.target
systemctl disable nfs-client.target

echo "* Disable ssh"
systemctl stop ssh
systemctl disable ssh

echo "* Redis optimization"
cat >> /etc/sysctl.conf <<EOF
vm.overcommit_memory = 1
EOF
mv /etc/redis/redis.conf /etc/redis/redis.conf.bak
mv /etc/redis/redis.conf.new /etc/redis/redis.conf
# zabbix redis-log access
usermod -a -G adm zabbix

echo "* Create bash-history"
cat >> /root/.bash_history << EOF
systemctl edit --full mastodon-web
systemctl daemon-reload
systemctl reset-failed mastodon-web
systemctl stop mastodon-web
systemctl stop mastodon-sidekiq
systemctl stop mastodon-streaming
systemctl start mastodon-web
systemctl start mastodon-sidekiq
systemctl start mastodon-streaming
mastodon restart
mastodon status
systemctl reload nginx
journalctl --since $(date '+%Y-%m-%d')
journalctl -r
EOF

echo "* Ensure bootstrap will run next time"
rm -rf /var/lib/bootstrap

echo "* Cleaning up."
rm -rf /usr/local/var/tmp/*
rm /var/log/syslog || true
touch /var/log/syslog || true
rm /root/customize
history -c
